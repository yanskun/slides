name: Deploy Slidev Projects

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.changes.outputs.projects }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed projects
        id: changes
        run: |
          echo "=== Detecting Slidev projects ==="
          
          # Get all directories that contain package.json with @slidev/cli
          projects=()
          for dir in */; do
            if [[ -f "${dir}package.json" ]]; then
              echo "Checking ${dir}package.json"
              if grep -q "@slidev/cli" "${dir}package.json"; then
                echo "Found Slidev project: ${dir%/}"
                # Check if this project has changes
                if git diff --name-only HEAD~1..HEAD | grep -q "^${dir}" || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                  projects+=("${dir%/}")
                  echo "Added ${dir%/} to build list"
                fi
              else
                echo "${dir%/} is not a Slidev project"
              fi
            fi
          done
          
          # If no changes detected and this is a push, deploy all projects anyway
          if [[ ${#projects[@]} -eq 0 ]]; then
            echo "No changes detected, building all Slidev projects"
            for dir in */; do
              if [[ -f "${dir}package.json" ]] && grep -q "@slidev/cli" "${dir}package.json"; then
                projects+=("${dir%/}")
                echo "Added ${dir%/} to build list (no changes mode)"
              fi
            done
          fi
          
          echo "Final projects list: ${projects[@]}"
          printf '%s\n' "${projects[@]}" | jq -R -s -c 'split("\n")[:-1]' > projects.json
          echo "projects=$(cat projects.json)" >> $GITHUB_OUTPUT
          echo "Detected projects: $(cat projects.json)"

  build:
    needs: detect-changes
    if: needs.detect-changes.outputs.projects != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.projects) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Debug project structure
        working-directory: ${{ matrix.project }}
        run: |
          echo "=== Project: ${{ matrix.project }} ==="
          pwd
          ls -la
          echo "=== package.json content ==="
          cat package.json
          echo "=== Check package-lock.json ==="
          ls -la package*.json || echo "No package-lock.json found"

      - name: Install dependencies
        working-directory: ${{ matrix.project }}
        run: |
          if [ -f "package-lock.json" ]; then
            echo "Using npm ci"
            npm ci
          else
            echo "Using npm install"
            npm install
          fi

      - name: Build slides
        working-directory: ${{ matrix.project }}
        run: |
          echo "=== Building slides for ${{ matrix.project }} ==="
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: slides-${{ matrix.project }}
          path: ${{ matrix.project }}/dist

  deploy:
    needs: [detect-changes, build]
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Combine and organize slides
        run: |
          mkdir -p combined
          
          # Copy each project's dist to its own subdirectory
          for project in ${{ join(fromJson(needs.detect-changes.outputs.projects), ' ') }}; do
            echo "Processing project: $project"
            if [ -d "artifacts/slides-$project" ]; then
              echo "Copying artifacts for $project"
              mkdir -p "combined/$project"
              cp -r "artifacts/slides-$project"/* "combined/$project/"
              echo "Successfully copied $project"
            else
              echo "Warning: No artifacts found for $project"
              ls -la artifacts/ || echo "No artifacts directory"
            fi
          done
          
          echo "=== Final combined structure ==="
          find combined -type f | head -20

      - name: Generate index page
        run: |
          cat > combined/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="ja">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Slidev Projects</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 2rem;
                background: #f8fafc;
              }
              h1 {
                color: #1e293b;
                text-align: center;
                margin-bottom: 2rem;
              }
              .projects {
                display: grid;
                gap: 1rem;
              }
              .project-card {
                background: white;
                padding: 1.5rem;
                border-radius: 8px;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                text-decoration: none;
                color: inherit;
                transition: transform 0.2s;
              }
              .project-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
              }
              .project-name {
                font-size: 1.25rem;
                font-weight: 600;
                color: #3b82f6;
                margin-bottom: 0.5rem;
              }
              .project-description {
                color: #64748b;
              }
            </style>
          </head>
          <body>
            <h1>ðŸ“Š Slidev Projects</h1>
            <div class="projects">
          EOF
          
          # Add project links
          for project in ${{ join(fromJson(needs.detect-changes.outputs.projects), ' ') }}; do
            # Read project name from package.json if available
            project_title="$project"
            if [ -f "$project/package.json" ]; then
              # Try to get a better name from package.json
              project_title=$(jq -r '.name // "'"$project"'"' "$project/package.json" 2>/dev/null || echo "$project")
            fi
            
            cat >> combined/index.html << EOF
              <a href="./$project/" class="project-card">
                <div class="project-name">$project_title</div>
                <div class="project-description">Slidev presentation</div>
              </a>
          EOF
          done
          
          cat >> combined/index.html << 'EOF'
            </div>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: combined

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4